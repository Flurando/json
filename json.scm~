(define decode
  (λ (str)
    ()))

(define encode
  (λ (sth)
    ()))

;;;object -> alist
;;;array -> to list
;;;string -> customized string
;;;number -> customized number
;;;true -> #t
;;;false -> #f
;;;null -> '()
(define dealer
  (lambda (str)
    (let ((len (string-length str))
	  (op (open-output-string))
	  (flag #t))
      (do ((i 0 len))
	  ((>= i len))
	(if (char=? #\" (string-ref str i))
	    (begin (if flag
		       (write '\" op)
		       (display #\" op))
		   (set! flag (not flag)))
     (if (and (char=? #\{ (string-ref str i)) flag)
         (display "((" op))
         (if (and (char=? #\} (string-ref str i)) flag)
         (display "))" op))
         (if (and (char=? #\, (string-ref str i)) flag)
         (display " " op))
         (if (and (char=? #\: (string-ref str i)) flag)
         (display " . " op))
      (get-output-string op))))

